import tkinter as tk
from tkinter import ttk, scrolledtext, filedialog, messagebox
import requests
import os
from urllib.parse import unquote, urlencode
from pathvalidate import sanitize_filename
import threading
import sys
import time
import re
import html
from bs4 import BeautifulSoup

# –ü–æ–ø—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å tkinterdnd2 –¥–ª—è Drag&Drop
try:
    from tkinterdnd2 import DND_FILES, TkinterDnD
    DND_AVAILABLE = True
except ImportError:
    DND_AVAILABLE = False
    print("–î–ª—è Drag&Drop —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install tkinterdnd2")

class RoundedFrame(tk.Frame):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ—Ä–µ–π–º —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã—Ö —É–≥–ª–æ–≤"""
    def __init__(self, parent, radius=15, bg='white', **kwargs):
        self.radius = radius
        self.bg = bg
        super().__init__(parent, bg=parent.cget('bg'), **kwargs)
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ—Ä–µ–π–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è
        self.inner_frame = tk.Frame(self, bg=bg, relief='flat', bd=0)
        self.inner_frame.pack(fill=tk.BOTH, expand=True, padx=radius//3, pady=radius//3)

class RoundedButton(tk.Frame):
    """–ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —Å —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏"""
    def __init__(self, parent, text, command=None, radius=10, bg='#405c80', fg='white', 
                 font=('Arial', 10, 'bold'), padx=20, pady=5, **kwargs):
        super().__init__(parent, bg=parent.cget('bg'), relief='flat', bd=0)
        
        self.command = command
        self.bg = bg
        self.fg = fg
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–Ω—É—Ç—Ä–∏ —Ñ—Ä–µ–π–º–∞ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è
        self.button = tk.Button(self, text=text, command=self._on_click,
                               bg=bg, fg=fg, font=font, relief='flat', 
                               bd=0, padx=padx, pady=pady, **kwargs)
        self.button.pack(fill=tk.BOTH, expand=True, padx=radius//2, pady=radius//2)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–∞
        self.button.bind('<Enter>', self._on_enter)
        self.button.bind('<Leave>', self._on_leave)
        
    def _on_click(self):
        if self.command:
            self.command()
            
    def _on_enter(self, event):
        # –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ - –Ω–µ–º–Ω–æ–≥–æ —Ç–µ–º–Ω–µ–µ
        darker = self._darken_color(self.bg, 20)
        self.button.configure(bg=darker)
        
    def _on_leave(self, event):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ü–≤–µ—Ç
        self.button.configure(bg=self.bg)
        
    def _darken_color(self, color, amount):
        """–î–µ–ª–∞–µ—Ç —Ü–≤–µ—Ç —Ç–µ–º–Ω–µ–µ"""
        if color.startswith('#'):
            color = color[1:]
            
        rgb = tuple(int(color[i:i+2], 16) for i in (0, 2, 4))
        darker = tuple(max(0, c - amount) for c in rgb)
        return f'#{darker[0]:02x}{darker[1]:02x}{darker[2]:02x}'

class YandexDiskDownloader:
    def __init__(self, root):
        self.root = root
        self.root.title("Yandex.Disk Mass Downloader v2.0")
        self.root.geometry("900x750")
        self.root.configure(bg='#f5f5f7')
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –≤ –º—è–≥–∫–∏—Ö —Å–µ—Ä—ã—Ö —Ç–æ–Ω–∞—Ö
        self.bg_color = '#f5f5f7'
        self.card_bg = '#ffffff'
        self.header_bg = '#3a3a3a'
        self.text_color = '#333333'
        self.accent_color = '#5a7ea6'
        self.secondary_color = '#8e8e93'
        self.drop_highlight = '#e8f4f8'
        self.drop_border = '#d1d1d6'
        
        self.default_download_dir = self.get_default_download_dir()
        
        self.create_widgets()
        self.is_downloading = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Drag&Drop
        self.setup_drag_drop()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        self.setup_hotkeys()
        
    def get_default_download_dir(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∑–∞–≥—Ä—É–∑–æ–∫ —Ä—è–¥–æ–º —Å –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º —Ñ–∞–π–ª–æ–º"""
        if getattr(sys, 'frozen', False):
            base_dir = os.path.dirname(sys.executable)
        else:
            base_dir = os.path.dirname(os.path.abspath(__file__))
        
        download_dir = os.path.join(base_dir, "Yandex_Downloads")
        if not os.path.exists(download_dir):
            os.makedirs(download_dir)
        return download_dir
        
    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ –Ω–∏–∂–Ω–∏–º–∏ —É–≥–ª–∞–º–∏
        header_frame = tk.Frame(self.root, bg=self.header_bg, height=90)
        header_frame.pack(fill=tk.X, padx=0, pady=0)
        header_frame.pack_propagate(False)
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ—Ä–µ–π–º –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å–∫—Ä—É–≥–ª–µ–Ω–∏—è
        header_inner = tk.Frame(header_frame, bg=self.header_bg)
        header_inner.pack(fill=tk.BOTH, expand=True, padx=0, pady=(0, 10))
        
        title_label = tk.Label(header_inner, 
                              text="Yandex.Disk Mass Downloader", 
                              bg=self.header_bg, 
                              fg='white',
                              font=('Arial', 16, 'bold'),
                              pady=20)
        title_label.pack(fill=tk.X)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        main_frame = tk.Frame(self.root, bg=self.bg_color, padx=20, pady=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–æ–∫ —Å –æ–±–ª–∞—Å—Ç—å—é Drag&Drop
        links_card = self.create_rounded_card(main_frame, "–°—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        links_card.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        btn_frame = tk.Frame(links_card.inner_frame, bg=self.card_bg)
        btn_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        RoundedButton(btn_frame, text="–í—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç", 
                     command=self.paste_text_from_clipboard,
                     bg=self.secondary_color, fg='white',
                     font=('Arial', 9), radius=8).pack(side=tk.LEFT, padx=(0,5))
        
        RoundedButton(btn_frame, text="–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏", 
                     command=self.paste_links_from_clipboard,
                     bg=self.secondary_color, fg='white',
                     font=('Arial', 9), radius=8).pack(side=tk.LEFT, padx=(0,5))
        
        RoundedButton(btn_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å HTML", 
                     command=self.load_html_file,
                     bg=self.secondary_color, fg='white',
                     font=('Arial', 9), radius=8).pack(side=tk.LEFT, padx=(0,5))
        
        RoundedButton(btn_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ", 
                     command=self.clear_links,
                     bg='#8e8e93', fg='white',
                     font=('Arial', 9), radius=8).pack(side=tk.LEFT)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è Drag&Drop —Å —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        drop_container = tk.Frame(links_card.inner_frame, bg=self.card_bg)
        drop_container.pack(fill=tk.BOTH, expand=True, pady=5)
        
        self.drop_area = tk.Frame(drop_container, bg=self.drop_border, relief='flat', bd=1)
        self.drop_area.pack(fill=tk.BOTH, expand=True)
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ—Ä–µ–π–º –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        self.drop_content = tk.Frame(self.drop_area, bg='white')
        self.drop_content.pack(fill=tk.BOTH, expand=True, padx=1, pady=1)
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–æ–∫
        self.links_text = scrolledtext.ScrolledText(
            self.drop_content, 
            width=80, 
            height=12,
            bg='white',
            fg=self.text_color,
            font=('Arial', 9),
            relief='flat',
            borderwidth=0
        )
        self.links_text.pack(fill=tk.BOTH, expand=True)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è Drag&Drop - –°–î–ï–õ–ê–ï–ú –ü–†–û–ó–†–ê–ß–ù–û–ô –î–õ–Ø –°–û–ë–´–¢–ò–ô
        self.drop_label = tk.Label(
            self.drop_content,
            text="–ü–ï–†–ï–¢–ê–©–ò–¢–ï HTML –§–ê–ô–õ–´ –°–Æ–î–ê\n(–∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –≤—Ä—É—á–Ω—É—é)\n\nüìÅ –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –≤ —ç—Ç—É –æ–±–ª–∞—Å—Ç—å",
            bg='white',
            fg='#666666',
            font=('Arial', 10, 'bold'),
            justify=tk.CENTER
        )
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        settings_card = self.create_rounded_card(main_frame, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏")
        settings_card.pack(fill=tk.X, pady=(0, 15))
        
        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏
        folder_frame = tk.Frame(settings_card.inner_frame, bg=self.card_bg)
        folder_frame.pack(fill=tk.X, pady=10)
        
        tk.Label(folder_frame, text="–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", 
                bg=self.card_bg, fg=self.text_color,
                font=('Arial', 9)).pack(anchor=tk.W)
        
        path_frame = tk.Frame(folder_frame, bg=self.card_bg)
        path_frame.pack(fill=tk.X, pady=5)
        
        self.folder_path = tk.StringVar(value=self.default_download_dir)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        entry_frame = tk.Frame(path_frame, bg=self.bg_color)
        entry_frame.pack(side=tk.LEFT, fill=tk.X, expand=True)
        
        entry_inner = tk.Frame(entry_frame, bg='white', relief='flat', bd=1)
        entry_inner.pack(fill=tk.BOTH, expand=True, padx=1, pady=1)
        
        folder_entry = tk.Entry(entry_inner, textvariable=self.folder_path, 
                               bg='white', fg=self.text_color,
                               font=('Arial', 9), relief='flat', borderwidth=0)
        folder_entry.pack(fill=tk.BOTH, expand=True, padx=8, pady=6)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–∑–æ—Ä–∞ —Å —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        RoundedButton(path_frame, text="–û–±–∑–æ—Ä", command=self.browse_folder,
                     bg=self.secondary_color, fg='white',
                     font=('Arial', 9), radius=6, padx=12, pady=4).pack(side=tk.RIGHT, padx=(5,0))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.stats_label = tk.Label(settings_card.inner_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", 
                                   bg=self.card_bg, fg=self.text_color,
                                   font=('Arial', 9))
        self.stats_label.pack(anchor=tk.W, pady=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        progress_frame = tk.Frame(settings_card.inner_frame, bg=self.card_bg)
        progress_frame.pack(fill=tk.X, pady=10)
        
        progress_container = tk.Frame(progress_frame, bg=self.bg_color)
        progress_container.pack(fill=tk.X)
        
        progress_inner = tk.Frame(progress_container, bg='#e5e5ea', relief='flat', bd=0)
        progress_inner.pack(fill=tk.X, padx=1, pady=1)
        
        self.progress = ttk.Progressbar(progress_inner, length=400, mode='determinate')
        self.progress.pack(fill=tk.X, padx=2, pady=2)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–æ–π
        control_frame = tk.Frame(settings_card.inner_frame, bg=self.card_bg)
        control_frame.pack(fill=tk.X, pady=10)
        
        self.download_btn = RoundedButton(control_frame, text="–ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", 
                                         command=self.start_download,
                                         bg=self.accent_color, fg='white', 
                                         font=('Arial', 10, 'bold'),
                                         radius=10, padx=20, pady=8)
        self.download_btn.pack(side=tk.LEFT, padx=(0,10))
        
        RoundedButton(control_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", command=self.clear_all,
                     bg='#8e8e93', fg='white',
                     font=('Arial', 9), radius=8).pack(side=tk.LEFT)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –ª–æ–≥–∞ —Å —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        log_card = self.create_rounded_card(main_frame, "–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        log_card.pack(fill=tk.BOTH, expand=True)
        
        # –õ–æ–≥ –≤ —Å–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        log_container = tk.Frame(log_card.inner_frame, bg=self.card_bg)
        log_container.pack(fill=tk.BOTH, expand=True)
        
        log_border = tk.Frame(log_container, bg='#d1d1d6', relief='flat', bd=1)
        log_border.pack(fill=tk.BOTH, expand=True, padx=0, pady=0)
        
        log_inner = tk.Frame(log_border, bg='#f8f8f8')
        log_inner.pack(fill=tk.BOTH, expand=True, padx=1, pady=1)
        
        self.log_text = scrolledtext.ScrolledText(
            log_inner, 
            width=80, 
            height=12,
            bg='#f8f8f8',
            fg=self.text_color,
            font=('Consolas', 8),
            relief='flat',
            borderwidth=0
        )
        self.log_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ Drag&Drop –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.show_drop_hint()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.create_context_menus()
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.setup_text_monitoring()
        
    def setup_text_monitoring(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.previous_text = ""
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        def check_text_change():
            current_text = self.links_text.get(1.0, tk.END).strip()
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è –∏ —Å—Ç–∞–ª –Ω–µ–ø—É—Å—Ç—ã–º, —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            if current_text != self.previous_text:
                self.previous_text = current_text
                if current_text:
                    self.hide_drop_hint()
                else:
                    self.show_drop_hint()
            
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 100 –º—Å
            self.root.after(100, check_text_change)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        check_text_change()
        
    def create_rounded_card(self, parent, title):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã—Ö —É–≥–ª–æ–≤"""
        card = RoundedFrame(parent, radius=12, bg=self.card_bg)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
        title_label = tk.Label(card.inner_frame, text=title, bg=self.card_bg, fg=self.text_color, 
                              font=('Arial', 11, 'bold'), anchor=tk.W)
        title_label.pack(fill=tk.X, pady=(0,10))
        
        return card
        
    def setup_drag_drop(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Drag&Drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        if DND_AVAILABLE:
            try:
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±–ª–∞—Å—Ç—å –∫–∞–∫ —Ü–µ–ª—å –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
                self.links_text.drop_target_register(DND_FILES)
                self.links_text.dnd_bind('<<Drop>>', self.on_drop)
                
                # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –¥–µ–ª–∞–µ–º –º–µ—Ç–∫—É –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–π –¥–ª—è —Å–æ–±—ã—Ç–∏–π Drag&Drop
                self.drop_label.drop_target_register(DND_FILES)
                self.drop_label.dnd_bind('<<Drop>>', self.on_drop)
                
                self.log("Drag&Drop –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω - –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ HTML —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å")
            except Exception as e:
                self.log(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Drag&Drop: {str(e)}")
        else:
            self.log("Drag&Drop –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install tkinterdnd2")
            
    def setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å –ª—é–±—ã–º–∏ —Ä–∞—Å–∫–ª–∞–¥–∫–∞–º–∏"""
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ (—Ä–∞–±–æ—Ç–∞—é—Ç —Å –ª—é–±–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π)
        self.root.bind_all('<Control-KeyPress>', self.handle_ctrl_hotkey)
        self.root.bind_all('<Control-Key>', self.handle_ctrl_hotkey)
        
    def handle_ctrl_hotkey(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Ctrl+–∫–ª–∞–≤–∏—à–∞, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å –ª—é–±—ã–º–∏ —Ä–∞—Å–∫–ª–∞–¥–∫–∞–º–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∫–ª–∞–≤–∏—à–∏
        keycode = event.keycode
        keysym = event.keysym.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∞—è –∫–ª–∞–≤–∏—à–∞ –Ω–∞–∂–∞—Ç–∞ —Å Ctrl
        # –ö–æ–¥—ã –∫–ª–∞–≤–∏—à –¥–ª—è C, V, X, A (—Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–∞—Å–∫–ª–∞–¥–∫–∏)
        if event.state & 0x4:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Ctrl –Ω–∞–∂–∞—Ç
            focused_widget = self.root.focus_get()
            
            # Ctrl+C - –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
            if keycode == 54 or keysym in ['c', '—Å']:  # –ê–Ω–≥–ª–∏–π—Å–∫–∞—è 'c' –∏ —Ä—É—Å—Å–∫–∞—è '—Å'
                if focused_widget == self.links_text:
                    self.copy_text()
                elif focused_widget == self.log_text:
                    self.copy_log_text()
                return "break"
            
            # Ctrl+V - –í—Å—Ç–∞–≤–∫–∞
            elif keycode == 55 or keysym in ['v', '–º']:  # –ê–Ω–≥–ª–∏–π—Å–∫–∞—è 'v' –∏ —Ä—É—Å—Å–∫–∞—è '–º'
                if focused_widget == self.links_text:
                    self.paste_text()
                return "break"
            
            # Ctrl+X - –í—ã—Ä–µ–∑–∞–Ω–∏–µ
            elif keycode == 53 or keysym in ['x', '—á']:  # –ê–Ω–≥–ª–∏–π—Å–∫–∞—è 'x' –∏ —Ä—É—Å—Å–∫–∞—è '—á'
                if focused_widget == self.links_text:
                    self.cut_text()
                return "break"
            
            # Ctrl+A - –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ
            elif keycode == 38 or keysym in ['a', '—Ñ']:  # –ê–Ω–≥–ª–∏–π—Å–∫–∞—è 'a' –∏ —Ä—É—Å—Å–∫–∞—è '—Ñ'
                if focused_widget == self.links_text:
                    self.select_all()
                elif focused_widget == self.log_text:
                    self.select_all_log()
                return "break"
        
    def create_context_menus(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω—é –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π"""
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—è —Å—Å—ã–ª–æ–∫
        self.context_menu_links = tk.Menu(self.root, tearoff=0, bg='white', fg=self.text_color, font=('Arial', 9))
        self.context_menu_links.add_command(label="–í—ã—Ä–µ–∑–∞—Ç—å (Ctrl+X)", command=self.cut_text)
        self.context_menu_links.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å (Ctrl+C)", command=self.copy_text)
        self.context_menu_links.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å (Ctrl+V)", command=self.paste_text)
        self.context_menu_links.add_separator()
        self.context_menu_links.add_command(label="–í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë (Ctrl+A)", command=self.select_all)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ª–æ–≥–∞
        self.context_menu_log = tk.Menu(self.root, tearoff=0, bg='white', fg=self.text_color, font=('Arial', 9))
        self.context_menu_log.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å (Ctrl+C)", command=self.copy_log_text)
        self.context_menu_log.add_separator()
        self.context_menu_log.add_command(label="–í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë (Ctrl+A)", command=self.select_all_log)
        self.context_menu_log.add_command(label="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", command=self.clear_log)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω—é –∫ –≤–∏–¥–∂–µ—Ç–∞–º
        self.links_text.bind("<Button-3>", self.show_context_menu_links)
        self.log_text.bind("<Button-3>", self.show_context_menu_log)
        
    def show_context_menu_links(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—è —Å—Å—ã–ª–æ–∫"""
        try:
            self.context_menu_links.tk_popup(event.x_root, event.y_root)
        finally:
            self.context_menu_links.grab_release()
            
    def show_context_menu_log(self, event):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—è –ª–æ–≥–∞"""
        try:
            self.context_menu_log.tk_popup(event.x_root, event.y_root)
        finally:
            self.context_menu_log.grab_release()
        
    def show_drop_hint(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –æ Drag&Drop"""
        if not self.links_text.get(1.0, tk.END).strip():
            self.drop_label.place(relx=0.5, rely=0.5, anchor=tk.CENTER)
            # –î–ï–õ–ê–ï–ú –ú–ï–¢–ö–£ –ü–†–û–ó–†–ê–ß–ù–û–ô –î–õ–Ø –°–û–ë–´–¢–ò–ô –ú–´–®–ò
            self.drop_label.bind('<Button-1>', lambda e: 'break')  # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏
            self.drop_label.bind('<Enter>', lambda e: 'break')     # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è
            
    def hide_drop_hint(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –æ Drag&Drop"""
        self.drop_label.place_forget()
        
    def on_drop(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            file_path = event.data
            
            # –û—á–∏—â–∞–µ–º —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ (Windows)
            if file_path.startswith('{') and file_path.endswith('}'):
                file_path = file_path[1:-1]
            
            self.log(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {file_path}")
            self.process_dropped_file(file_path)
            
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è: {str(e)}")
            
    def process_dropped_file(self, file_path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ç–∞—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(file_path):
            self.log("–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_ext = os.path.splitext(file_path)[1].lower()
        
        if file_ext in ['.html', '.htm']:
            self.process_html_file(file_path)
        elif file_ext in ['.txt']:
            self.process_text_file(file_path)
        else:
            messagebox.showwarning("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", 
                                 "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ HTML (.html, .htm) –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ (.txt) —Ñ–∞–π–ª—ã.\n"
                                 f"–í–∞—à —Ñ–∞–π–ª: {os.path.basename(file_path)}")
            
    def process_text_file(self, file_path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è"""
        try:
            self.log(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {os.path.basename(file_path)}")
            
            with open(file_path, 'r', encoding='utf-8') as f:
                text_content = f.read()
            
            extracted_links = self.extract_urls_from_text(text_content)
            
            if extracted_links:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                current_content = self.links_text.get(1.0, tk.END).strip()
                if current_content:
                    new_content = current_content + '\n' + '\n'.join(extracted_links)
                else:
                    new_content = '\n'.join(extracted_links)
                
                self.links_text.delete(1.0, tk.END)
                self.links_text.insert(1.0, new_content)
                self.hide_drop_hint()
                self.log(f"–ò–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(extracted_links)} —Å—Å—ã–ª–æ–∫")
            else:
                self.log("–í —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞")
                
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")
            
    def paste_text_from_clipboard(self):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –∫–∞–∫ –µ—Å—Ç—å"""
        try:
            clipboard_text = self.root.clipboard_get()
            if clipboard_text:
                self.links_text.delete(1.0, tk.END)
                self.links_text.insert(1.0, clipboard_text)
                self.hide_drop_hint()
                self.log("–¢–µ–∫—Å—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞: {str(e)}")
    
    def paste_links_from_clipboard(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞ –∏ –≤—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Ö"""
        try:
            clipboard_text = self.root.clipboard_get()
            if not clipboard_text:
                self.log("–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç")
                return
                
            extracted_links = self.extract_urls_from_text(clipboard_text)
            if extracted_links:
                self.links_text.delete(1.0, tk.END)
                self.links_text.insert(1.0, '\n'.join(extracted_links))
                self.hide_drop_hint()
                self.log(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ –∏ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ {len(extracted_links)} —Å—Å—ã–ª–æ–∫")
            else:
                self.log("–°—Å—ã–ª–∫–∏ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫: {str(e)}")
    
    def load_html_file(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç HTML —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ –≤—Å–µ —Å—Å—ã–ª–∫–∏"""
        try:
            file_path = filedialog.askopenfilename(
                title="–í—ã–±–µ—Ä–∏—Ç–µ HTML —Ñ–∞–π–ª",
                filetypes=[("HTML files", "*.html;*.htm"), ("Text files", "*.txt"), ("All files", "*.*")]
            )
            if file_path:
                self.process_html_file(file_path)
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ HTML —Ñ–∞–π–ª–∞: {str(e)}")
    
    def process_html_file(self, file_path):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTML —Ñ–∞–π–ª"""
        try:
            self.log(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ HTML —Ñ–∞–π–ª–∞: {os.path.basename(file_path)}")
            with open(file_path, 'r', encoding='utf-8') as f:
                html_content = f.read()
            
            extracted_links = self.extract_urls_from_text(html_content)
            if extracted_links:
                current_content = self.links_text.get(1.0, tk.END).strip()
                new_content = current_content + '\n' + '\n'.join(extracted_links) if current_content else '\n'.join(extracted_links)
                self.links_text.delete(1.0, tk.END)
                self.links_text.insert(1.0, new_content)
                self.hide_drop_hint()
                self.log(f"–ò–∑ HTML —Ñ–∞–π–ª–∞ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(extracted_links)} —Å—Å—ã–ª–æ–∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞")
            else:
                self.log("–í HTML —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ HTML —Ñ–∞–π–ª–∞: {str(e)}")
    
    def extract_urls_from_text(self, text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        urls = []
        if not text:
            return urls
            
        text = html.unescape(text)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
        patterns = [
            r'<a\s+[^>]*href\s*=\s*["\'](https?://[^"\']*yandex[^"\']*|https?://[^"\']*yadi\.sk[^"\']*)["\'][^>]*>',
            r'\[[^\]]*\]\((https?://[^)]*yandex[^)]*|https?://[^)]*yadi\.sk[^)]*)\)',
            r'(https?://[^\s<>"\'\(\)]*yandex[^\s<>"\'\(\)]*|https?://[^\s<>"\'\(\)]*yadi\.sk[^\s<>"\'\(\)]*)'
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            urls.extend(matches)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏
        valid_urls = []
        for url in set(urls):
            if any(domain in url for domain in ['yandex.ru', 'yandex.com', 'yadi.sk', 'disk.yandex']):
                clean_url = self.clean_url(url)
                if clean_url:
                    valid_urls.append(clean_url)
        
        return valid_urls
    
    def clean_url(self, url):
        """–û—á–∏—â–∞–µ—Ç URL –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        try:
            url = url.rstrip('.,;:!?')
            if url.endswith(')') and url.count('(') < url.count(')'):
                url = url[:-1]
            if url.endswith('"') or url.endswith("'"):
                url = url[:-1]
            return url
        except:
            return None
            
    def clear_links(self):
        """–û—á–∏—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ —Å—Å—ã–ª–æ–∫"""
        self.links_text.delete(1.0, tk.END)
        self.show_drop_hint()
            
    def browse_folder(self):
        folder = filedialog.askdirectory()
        if folder:
            self.folder_path.set(folder)
            
    def clear_all(self):
        self.links_text.delete(1.0, tk.END)
        self.log_text.delete(1.0, tk.END)
        self.progress['value'] = 0
        self.stats_label.config(text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.show_drop_hint()
            
    def log(self, message):
        timestamp = time.strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
        self.root.update_idletasks()
        
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏
    def cut_text(self, event=None):
        """–í—ã—Ä–µ–∑–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        try:
            focused_widget = self.root.focus_get()
            if focused_widget == self.links_text:
                self.links_text.event_generate("<<Cut>>")
                self.hide_drop_hint()  # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –≤—ã—Ä–µ–∑–∞–Ω–∏–∏
        except:
            pass
            
    def copy_text(self, event=None):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–ª—è —Å—Å—ã–ª–æ–∫"""
        try:
            focused_widget = self.root.focus_get()
            if focused_widget == self.links_text:
                self.links_text.event_generate("<<Copy>>")
        except:
            pass
            
    def copy_log_text(self, event=None):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –ª–æ–≥–∞"""
        try:
            focused_widget = self.root.focus_get()
            if focused_widget == self.log_text:
                self.log_text.event_generate("<<Copy>>")
        except:
            pass
            
    def paste_text(self, event=None):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ —Å—Å—ã–ª–æ–∫"""
        try:
            focused_widget = self.root.focus_get()
            if focused_widget == self.links_text:
                self.links_text.event_generate("<<Paste>>")
                self.hide_drop_hint()
        except:
            pass
            
    def select_all(self, event=None):
        """–í—ã–¥–µ–ª—è–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ —Å—Å—ã–ª–æ–∫"""
        try:
            focused_widget = self.root.focus_get()
            if focused_widget == self.links_text:
                self.links_text.tag_add(tk.SEL, "1.0", tk.END)
                self.links_text.mark_set(tk.INSERT, "1.0")
                self.links_text.see(tk.INSERT)
        except:
            pass
            
    def select_all_log(self, event=None):
        """–í—ã–¥–µ–ª—è–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ –ª–æ–≥–µ"""
        try:
            focused_widget = self.root.focus_get()
            if focused_widget == self.log_text:
                self.log_text.tag_add(tk.SEL, "1.0", tk.END)
                self.log_text.mark_set(tk.INSERT, "1.0")
                self.log_text.see(tk.INSERT)
        except:
            pass
            
    def clear_log(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥"""
        self.log_text.delete(1.0, tk.END)
        
    def start_download(self):
        if self.is_downloading:
            return
            
        links_text = self.links_text.get(1.0, tk.END).strip()
        links = self.extract_urls_from_text(links_text)
        save_path = self.folder_path.get()
        
        if not links:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞")
            return
            
        if not save_path:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
            
        if not os.path.exists(save_path):
            os.makedirs(save_path)
            
        self.is_downloading = True
        self.download_btn.button.config(state='disabled')
        
        thread = threading.Thread(target=self.download_files, args=(links, save_path))
        thread.daemon = True
        thread.start()
        
    def download_files(self, links, save_path):
        total_files = len(links)
        successful = 0
        failed = 0
        
        self.progress['maximum'] = total_files
        self.progress['value'] = 0
        
        self.log(f"–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ {total_files} —Ñ–∞–π–ª–æ–≤...")
        self.log(f"–ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {save_path}")
        
        for i, link in enumerate(links):
            if not self.is_downloading:
                break
                
            try:
                self.stats_label.config(text=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {i+1}/{total_files}")
                self.log(f"[{i+1}/{total_files}] –û–±—Ä–∞–±–æ—Ç–∫–∞: {link}")
                
                if self.download_file_correct(link, save_path):
                    successful += 1
                else:
                    failed += 1
                    
                self.progress['value'] = i + 1
                time.sleep(0.5)
                
            except Exception as e:
                failed += 1
                self.log(f"‚úó –û—à–∏–±–∫–∞: {str(e)}")
                
        self.is_downloading = False
        self.download_btn.button.config(state='normal')
        self.stats_label.config(text=f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—à–Ω–æ: {successful}, –û—à–∏–±–æ–∫: {failed}")
        self.log(f"=== –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: {successful}, –û—à–∏–±–æ–∫: {failed} ===")
        
        if successful > 0:
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {successful}\n–û—à–∏–±–æ–∫: {failed}")
    
    def download_file_correct(self, public_key, save_path):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É—è API –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"""
        try:
            base_url = 'https://cloud-api.yandex.net/v1/disk/public/resources/download?'
            final_url = base_url + urlencode(dict(public_key=public_key))
            response = requests.get(final_url, timeout=30)
            
            if response.status_code != 200:
                self.log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏: {response.status_code}")
                return False
                
            download_url = response.json()['href']
            filename = self.get_filename_from_url(download_url) or f"file_{int(time.time())}.downloaded"
            safe_filename = sanitize_filename(filename)
            full_path = os.path.join(save_path, safe_filename)
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
            counter = 1
            original_path = full_path
            while os.path.exists(full_path):
                name, ext = os.path.splitext(safe_filename)
                full_path = os.path.join(save_path, f"{name}_{counter}{ext}")
                counter += 1
            
            self.log(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {safe_filename}")
            download_response = requests.get(download_url, stream=True, timeout=60)
            
            if download_response.status_code == 200:
                with open(full_path, 'wb') as f:
                    for chunk in download_response.iter_content(chunk_size=8192):
                        if not self.is_downloading:
                            f.close()
                            if os.path.exists(full_path):
                                os.remove(full_path)
                            return False
                        if chunk:
                            f.write(chunk)
                
                self.log(f"‚úì –£—Å–ø–µ—à–Ω–æ: {safe_filename}")
                return True
            else:
                self.log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {download_response.status_code}")
                return False
                
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {str(e)}")
            return False
    
    def get_filename_from_url(self, url):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL"""
        try:
            decoded_url = unquote(url)
            if 'filename=' in decoded_url:
                filename_part = decoded_url.split('filename=')[1]
                return filename_part.split('&')[0]
            
            path = decoded_url.split('?')[0]
            filename = os.path.basename(path)
            return filename if filename and '.' in filename else None
        except:
            return None

def main():
    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–µ –æ–∫–Ω–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Drag&Drop –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if DND_AVAILABLE:
        root = TkinterDnD.Tk()
    else:
        root = tk.Tk()
    
    app = YandexDiskDownloader(root)
    root.mainloop()

if __name__ == "__main__":
    main()